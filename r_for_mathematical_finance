*** WEEK 1: PROBABILITY

# Code sample: scaling the binomial distribution
# Binomial distribution – sequence of increasing n
nlist <- c(1, 2, 5, 10, 20, 50, 100, 1000)

p <- 0.1
for (n in nlist) {
  k <- 0:n
  f <- dbinom(k, n, p)
  barplot(f, names = k, xlab = "Number of Successes", ylab = "Probability",
          main = paste("Binomial Distribution, p =", p, " n =", n))
  readline()
}

# Code sample: scaling the binomial distribution
# Binomial distribution – sequence of increasing n
nlist <- c(1, 2, 5, 10, 20, 50, 100, 1000)

p <- 0.3
for (n in nlist) {
  k <- 0:n
  f <- dbinom(k, n, p)
  barplot(f, names = k, xlab = "Number of Successes", ylab = "Probability",
          main = paste("Binomial Distribution, p =", p, " n =", n))
  readline()
}

*** WEEK 2: INTRO TO DISCRETE-TIME STOCHASTIC PROCESSES (MONTE CARLO)

## Basic functions to generate random numbers:
# 1. Generate Nt x Np independent pseudo-random draws (uniform [0,1])
z = np.random.rand(Nt, Np)

# 2. Generate +1 with probability p and -1 with probability 1-p
x = np.sign(p - z)

# 3. Generate +1 with probability p and 0 with probability 1-p
u = (x + 1) / 2

# 4. Generate Nt x Np independent normal draws with mean mu and std sigma
r = np.random.normal(loc=mu, scale=sigma, size=(Nt, Np))

# 5. Generate sequences S corresponding to lognormal distribution
S = np.exp(np.cumsum(r, axis=0))

## Simple 20-step random walk
p <- 0.5              # Set probability of "success"
q <- 1 - p            # Set probability of "failure"
Nt <- 20              # Number of time steps
Np <- 1               # Number of sample paths

z <- matrix(runif(Nt * Np), nrow = Nt)  # Generate a set of uniform random draws
x <- sign(p - z)                        # Transform to binomial random variable +/-1
s <- matrix(0, Nt + 1, Np)              # Initial value for random walk

# Note: R indices start with 1, not zero
for (k in 1:Nt) {
  s[k + 1, ] <- s[k, ] + x[k, ]         # New location = previous + new random step
}

plot(s, type = "b")                     # Plot resulting path

## Many simulations of a one-year daily walk
Nt <- 252           # Number of trading days in a year
Np <- 1e4           # Reasonably large number of simulations (10,000)

z <- matrix(runif(Nt * Np), nrow = Nt)  # Generate a set of uniform random draws
x <- sign(p - z)                        # Transform to binomial random variable +/-1
s <- matrix(0, Nt + 1, Np)              # Initialize and reserve space for random paths

for (k in 1:Nt) {
  s[k + 1, ] <- s[k, ] + x[k, ]         # New location equals previous plus a new random step
}

matplot(s[, 1:3], type = "b")           # Plot a few of the resulting paths
