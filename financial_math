## CHAPTER 1: LOANS - LEVEL PAYMENTS, OUTSTANDING BALANCES, AND AMORTIZATION TABLES

# Question 1: Calculate the annual loan payment
# Given data
loan_amount = 1000  # Principal amount
interest_rate = 0.05  # Annual interest rate
num_years = 5  # Number of years

# Using annuity formula: A = P * (r * (1 + r)^n) / ((1 + r)^n - 1)
annual_payment = loan_amount * (interest_rate * (1 + interest_rate) ** num_years) / ((1 + interest_rate) ** num_years - 1)

# Round to nearest dollar
annual_payment_rounded = round(annual_payment)

# Question 2: Find interest portion of the tenth payment
# Given data
interest_rate = 0.05  # Annual interest rate
interest_payment_4 = 213.48  # Interest portion of 4th payment
principal_payment_4 = 268.23  # Principal portion of 4th payment

# Total payment per year (sum of interest and principal in 4th payment)
annual_payment = interest_payment_4 + principal_payment_4

# Loan balance after 4th payment
loan_balance_4 = (interest_payment_4 / interest_rate)  # Since Interest = Balance * Rate

# Remaining balance after 4th payment
remaining_balance_4 = loan_balance_4 - principal_payment_4

# Compute remaining balance after the 9th payment
remaining_balance_9 = remaining_balance_4 * ((1 + interest_rate) ** 5) - (
    annual_payment * (((1 + interest_rate) ** 5 - 1) / interest_rate)
)

# Interest portion of the 10th payment
interest_payment_10 = remaining_balance_9 * interest_rate

# Round to nearest whole dollar
interest_payment_10_rounded = round(interest_payment_10)

# Question 3: Find total interest paid
# Given data
loan_amount = 10000  # Principal amount
monthly_payment = 600  # Monthly payment
num_months = 24  # Total number of months

# Total amount paid over the loan period
total_amount_paid = monthly_payment * num_months

# Total interest paid
total_interest_paid = total_amount_paid - loan_amount

# Round to nearest whole dollar
total_interest_paid_rounded = round(total_interest_paid)

total_interest_paid_rounded

/// Question 4-5-6:
# Given data
loan_amount = 200000  # Principal amount
annual_interest_rate = 0.06  # Annual interest rate
monthly_interest_rate = annual_interest_rate / 12  # Monthly interest rate
num_months = 30 * 12  # Total months (30 years)

# Question 4: Monthly payment calculation using annuity formula
monthly_payment = loan_amount * (monthly_interest_rate * (1 + monthly_interest_rate) ** num_months) / \
                  ((1 + monthly_interest_rate) ** num_months - 1)

# Round to nearest whole dollar
monthly_payment_rounded = round(monthly_payment)

# Question 5: Outstanding balance after 120 payments (10 years)
num_payments_made = 120  # Payments made
remaining_balance_120 = loan_amount * ((1 + monthly_interest_rate) ** num_payments_made) - \
                        (monthly_payment * (((1 + monthly_interest_rate) ** num_payments_made - 1) / monthly_interest_rate))

# Round to nearest hundred dollars
remaining_balance_120_rounded = round(remaining_balance_120, -2)

# Question 6: Extra $100 per month payment
extra_payment = 100
new_monthly_payment = monthly_payment + extra_payment

# New remaining balance after 120 payments with extra payments
remaining_balance_120_extra = loan_amount * ((1 + monthly_interest_rate) ** num_payments_made) - \
                              (new_monthly_payment * (((1 + monthly_interest_rate) ** num_payments_made - 1) / monthly_interest_rate))

# Round to nearest hundred dollars
remaining_balance_120_extra_rounded = round(remaining_balance_120_extra, -2)

monthly_payment_rounded, remaining_balance_120_rounded, remaining_balance_120_extra_rounded

# Question 7: Calculate outstanding balance of the loan after 5th payment
# Given data
loan_amount = 20000  # Principal amount
annual_payment = 4000  # Annual payment
annual_interest_rate = 0.09  # Annual interest rate
monthly_interest_rate = annual_interest_rate / 12  # Monthly interest rate
effective_annual_interest_rate = (1 + monthly_interest_rate) ** 12 - 1  # Convert to effective annual rate
num_payments_made = 5  # Payments made

# Outstanding balance after 5th payment using loan balance formula
remaining_balance_5 = loan_amount * ((1 + effective_annual_interest_rate) ** num_payments_made) - \
                      (annual_payment * (((1 + effective_annual_interest_rate) ** num_payments_made - 1) / effective_annual_interest_rate))

# Round to nearest ten dollars
remaining_balance_5_rounded = round(remaining_balance_5, -1)

remaining_balance_5_rounded

# Question 8: Finding X in an increasing annuity
# Given data
loan_amount = 25000  # Principal amount
num_years = 20  # Number of payments
annual_interest_rate = 0.06  # Annual interest rate
payment_increase = 200  # Increase per year

# Using present value formula for an increasing annuity
# PV = X * (1 - (1+r)^-n) / r + 200 * [(1 - (1+r)^-n) / r^2 - n(1+r)^-n / r]
r = annual_interest_rate
n = num_years

# Solve for X
X = (loan_amount - payment_increase * (((1 - (1 + r) ** -n) / r**2) - (n * (1 + r) ** -n / r))) / ((1 - (1 + r) ** -n) / r)

# Round to nearest ten dollars
X_rounded = round(X, -1)

# Question 9: Finding principal portion in 10th payment
# Given data
principal_5 = 250  # Principal portion in 5th payment

# Principal portion increases geometrically with (1 + r)
principal_10 = principal_5 * (1 + r) ** 5

# Round to nearest dollar
principal_10_rounded = round(principal_10)

X_rounded, principal_10_rounded

# Question 10: Finding the annual effective interest rate
# Given data
principal_1 = 100.00  # Principal repaid in first payment
principal_15 = 197.99  # Principal repaid in 15th payment
n = 15  # 15th payment

# Principal repaid follows a geometric sequence: P_k = P_1 * (1 + r)^(k-1)
# Solving for r: (P_15 / P_1) = (1 + r)^14

r_annual = (principal_15 / principal_1) ** (1 / (n - 1)) - 1

# Round to four decimal places
r_annual_rounded = round(r_annual, 4)

# Question 11: Finding principal repaid in first payment
# Given data
monthly_payment = 500  # Level monthly payment
outstanding_balance_59 = 495.05  # Balance after 59th payment
interest_60 = 4.95  # Interest portion of last payment

# Interest rate per month: i = Interest portion / Outstanding balance
monthly_interest_rate = interest_60 / outstanding_balance_59

# Principal portion of first payment: P_1 = Monthly Payment - Interest on full loan
# Full loan balance before first payment = Monthly Payment * (1 - (1 + i)^-60) / i
loan_amount = monthly_payment * (1 - (1 + monthly_interest_rate) ** -60) / monthly_interest_rate

# First interest portion: i * Loan Amount
interest_1 = loan_amount * monthly_interest_rate

# First principal portion
principal_1_payment = monthly_payment - interest_1

# Round to nearest dollar
principal_1_payment_rounded = round(principal_1_payment)

r_annual_rounded, principal_1_payment_rounded

# Question 12: Finding the principal repaid in the first payment

# Given data
annual_interest_rate = 0.06  # Annual effective interest rate
balance_year_2 = 3172.82  # Balance at end of 2nd year
balance_year_3 = 2176.20  # Balance at end of 3rd year

# The difference between the two balances is the principal repaid in the 3rd year
principal_3 = balance_year_2 - balance_year_3

# The principal portion follows a geometric progression with (1 + interest rate)
# Principal repaid in year 2 = Principal in year 3 / (1 + interest rate)
principal_2 = principal_3 / (1 + annual_interest_rate)

# Principal repaid in first year follows the same pattern
principal_1_payment = principal_2 / (1 + annual_interest_rate)

# Round to nearest dollar
principal_1_payment_rounded = round(principal_1_payment)

# Question 13: Total Interest Paid

# Given data
loan_amount_14 = 10000  # Initial loan amount
num_years_14 = 10  # Number of years
annual_interest_rate_14 = 0.08  # Annual effective interest rate
principal_payment_14 = 1000  # Principal repaid each year

# Interest paid each year follows: Interest = Outstanding Balance * Interest Rate
# Compute total interest paid over 10 years
total_interest_paid_14 = 0
outstanding_balance = loan_amount_14

for _ in range(num_years_14):
    interest_payment = outstanding_balance * annual_interest_rate_14
    total_interest_paid_14 += interest_payment
    outstanding_balance -= principal_payment_14  # Reduce balance by fixed principal amount

# Round to nearest dollar
total_interest_paid_14_rounded = round(total_interest_paid_14)

# Question 14: Finding interest rate j

# Given data
loan_amount_15 = 12000  # Initial loan amount
num_years_15 = 6  # Number of years
annual_interest_rate_option_a = 0.06  # Annual effective rate for option A
principal_payment_15 = 2000  # Principal repaid each year

# Compute equal annual payment for option A using annuity formula
annual_payment_option_a = loan_amount_15 * (annual_interest_rate_option_a * (1 + annual_interest_rate_option_a) ** num_years_15) / \
                          ((1 + annual_interest_rate_option_a) ** num_years_15 - 1)

# Solve for interest rate j in option B where total payments match option A
# Total payment in option B = Principal payment + Interest (j * remaining balance)
# Need to find j such that sum of payments equals num_years * annual_payment_option_a

from sympy import symbols, Eq, solve

j = symbols('j')  # Define symbol for interest rate
total_payment_option_b = 0
outstanding_balance_15 = loan_amount_15

for _ in range(num_years_15):
    interest_payment = j * outstanding_balance_15
    total_payment_option_b += principal_payment_15 + interest_payment
    outstanding_balance_15 -= principal_payment_15

# Solve for j where total payments equal total payments in option A
equation = Eq(total_payment_option_b, num_years_15 * annual_payment_option_a)
j_solution = solve(equation, j)[0]

# Round to four decimal places
j_solution_rounded = round(j_solution, 4)

total_interest_paid_14_rounded, j_solution_rounded


## CHAPTER 2: LOANS - NON-LEVEL PAYMENTS, DROP OR BALLOON PAYMENTS, REFINANCING

# Question 1: Refinancing after 5 payments with new interest rate, keeping the original term

# Given data
loan_amount = 30000  # Initial loan amount
annual_interest_rate_old = 0.10  # Original interest rate (10%)
annual_interest_rate_new = 0.08  # New interest rate after refinancing (8%)
num_years = 15  # Original loan term
num_payments_made = 5  # Payments made before refinancing

# Step 1: Compute original annual payment using annuity formula
annual_payment_old = loan_amount * (annual_interest_rate_old * (1 + annual_interest_rate_old) ** num_years) / \
                     ((1 + annual_interest_rate_old) ** num_years - 1)

# Step 2: Compute remaining balance after 5 payments
remaining_balance = loan_amount * ((1 + annual_interest_rate_old) ** num_payments_made) - \
                    (annual_payment_old * (((1 + annual_interest_rate_old) ** num_payments_made - 1) / annual_interest_rate_old))

# Step 3: Compute new annual payment using the remaining balance and new interest rate
num_remaining_years = num_years - num_payments_made  # Years left after refinancing

annual_payment_new = remaining_balance * (annual_interest_rate_new * (1 + annual_interest_rate_new) ** num_remaining_years) / \
                     ((1 + annual_interest_rate_new) ** num_remaining_years - 1)

# Round to nearest ten dollars
annual_payment_new_rounded = round(annual_payment_new, -1)

annual_payment_new_rounded

# Question 2: Outstanding balance after payments

# Given data
loan_amount_2 = 10_000_000  # Initial loan amount
annual_interest_rate_2 = 0.12  # Annual effective rate (12%)
monthly_interest_rate_2 = annual_interest_rate_2 / 12  # Monthly rate

# Convert dates to months since loan inception (Jan 1, 2019)
payment_schedule = {
    12: 2_500_000,  # 12/31/2019 (12 months later)
    24: 3_000_000,  # 12/31/2020 (24 months later)
    48: 1_000_000   # 12/31/2022 (48 months later)
}

# Calculate balance progression with compounding and payments
outstanding_balance_2 = loan_amount_2

for month, payment in sorted(payment_schedule.items()):
    outstanding_balance_2 *= (1 + monthly_interest_rate_2) ** (month - (0 if month == 12 else prev_month))
    outstanding_balance_2 -= payment
    prev_month = month

# Round to nearest thousand dollars
outstanding_balance_2_rounded = round(outstanding_balance_2, -3)

# Question 3: Principal contained in the 5th payment

# Given data
num_years_7 = 8  # Loan term
interest_rate_7 = 0.06  # Annual interest rate

# Payments form an arithmetic series: 100, 200, 300, ..., 800
first_payment_7 = 100
payment_increase_7 = 100

# Compute total loan amount using sum of present values
PV_total_loan_7 = sum(
    (first_payment_7 + (n - 1) * payment_increase_7) / (1 + interest_rate_7) ** n for n in range(1, num_years_7 + 1)
)

# Compute principal portion of 5th payment
payment_5 = first_payment_7 + 4 * payment_increase_7  # 5th payment amount
remaining_balance_4 = sum(
    (first_payment_7 + (n - 1) * payment_increase_7) / (1 + interest_rate_7) ** (n - 4)
    for n in range(5, num_years_7 + 1)
)

interest_5 = remaining_balance_4 * interest_rate_7
principal_5 = payment_5 - interest_5

# Round to nearest dollar
principal_5_rounded = round

# Question 4: Original loan value with different payment phases

# Given data
interest_rate_8 = 0.05  # Annual effective interest rate
payments_8 = [1000] * 4 + [2000] * 4 + [3000] * 4  # Payment schedule
years_8 = list(range(1, 13))  # Payment years

# Compute present value of each phase and sum
PV_loan_8 = sum(payments_8[i - 1] / (1 + interest_rate_8) ** i for i in years_8)

# Round to nearest 100 dollars
PV_loan_8_rounded = round(PV_loan_8, -2)


import math

# Question 5:
# Person A borrows $800.
# Repayment: 9 end-of-year payments of $100 + a balloon payment X at the end of year 10.
# Interest rate = 5% per year effective.

interest_rate_11 = 0.05
principal_11 = 800

# Calculate present value of the 9 payments of $100.
pv_payments_11 = sum(100 / ((1 + interest_rate_11) ** k) for k in range(1, 10))

# The balloon payment X must satisfy:
# pv_payments_11 + X/(1.05)^10 = 800
X_11 = (principal_11 - pv_payments_11) * ((1 + interest_rate_11) ** 10)

# Round to the nearest dollar.
X_11_rounded = round(X_11)

print("Question 11: The balloon payment X is $", X_11_rounded)

# Question 6:
# Person A borrows $700.
# Repayment: 10 end-of-year payments of $100 + a drop payment X at the end of year 11.
# Interest rate = 8% per year effective.

interest_rate_12 = 0.08
principal_12 = 700

# Calculate present value of the 10 payments of $100.
pv_payments_12 = sum(100 / ((1 + interest_rate_12) ** k) for k in range(1, 11))

# The drop payment X must satisfy:
# pv_payments_12 + X/(1.08)^11 = 700
X_12 = (principal_12 - pv_payments_12) * ((1 + interest_rate_12) ** 11)

# Round to the nearest dollar.
X_12_rounded = round(X_12)

print("Question 12: The drop payment X is $", X_12_rounded)

# Question 7:
# Homeowner A borrows $250,000 for 30 years (360 months) with monthly payments.
# The interest rate is 9% compounded monthly.
# After the 44th payment, the loan is refinanced at 6% compounded monthly with term unchanged.
#
# Step 1: Calculate the original monthly payment.
L = 250000
n_total = 30 * 12  # 360 months
i_old = 0.09 / 12  # monthly interest rate for original loan

# Monthly payment formula:
P_old = L * (i_old * (1 + i_old) ** n_total) / ((1 + i_old) ** n_total - 1)

# Step 2: Find outstanding balance after 44 payments.
n_payments_made = 44
# Outstanding balance B = L*(1+i_old)^n_payments_made - P_old*((1+i_old)^n_payments_made - 1)/i_old
B = L * ((1 + i_old) ** n_payments_made) - P_old * (((1 + i_old) ** n_payments_made - 1) / i_old)

# Step 3: Refinance with new monthly rate and remaining term.
i_new = 0.06 / 12  # New monthly interest rate
n_remaining = n_total - n_payments_made  # Remaining months

# New monthly payment formula:
P_new = B * (i_new * (1 + i_new) ** n_remaining) / ((1 + i_new) ** n_remaining - 1)

# Round new monthly payment to the nearest 10 dollars.
P_new_rounded = round(P_new / 10) * 10

print("Question 13: The new monthly payment is $", P_new_rounded)


import math

# Question 8:
# -----------------------------------
# Student A has an outstanding balance of $30,000 immediately after a payment.
# They continue to pay $500 at the end of each month.
# The interest rate is 6% compounded monthly, so the monthly rate is:
i = 0.06 / 12  # 0.005 per month

# We need to find the effective number of payments (n*) that would exactly amortize $30,000 at $500/month.
# The annuity formula for a present value (PV) is:
#    PV = Payment * (1 - (1+i)^(-n)) / i.
# Here, PV = 30000 and Payment = 500.
# Solve for n:
#    1 - (1+i)^(-n) = (PV * i) / Payment.
ratio = (30000 * i) / 500  # = (30000*0.005)/500 = 150/500 = 0.3.
# Then:
#    (1+i)^(-n) = 1 - 0.3 = 0.7,
# so:
n_star = -math.log(0.7) / math.log(1 + i)
# n_star will be noninteger. The number of full $500 payments is the integer part.
n_full = math.floor(n_star)

# Calculate the outstanding balance immediately after the n_full-th payment.
# The outstanding balance after n payments is given by:
#   B(n) = PV*(1+i)^n - Payment * ((1+i)^n - 1) / i.
B_n = 30000 * (1 + i)**n_full - 500 * (((1 + i)**n_full - 1) / i)

# The final (drop) payment is made one month after the n_full-th payment,
# so interest accrues on the remaining balance for one month.
final_drop_payment = B_n * (1 + i)

# Round the final drop payment to the nearest 10 dollars.
final_drop_payment_rounded = round(final_drop_payment / 10) * 10


## CHAPTER 3: BOND PRICING

# Given data for Question 1
par_value = 8000  # Face value of the bond
coupon_payment = 200  # Semiannual coupon payment
annual_yield = 0.06  # Annual yield rate
n_years = 20  # Number of years
compounding_periods = 2  # Semiannual compounding

# Convert annual yield to semiannual yield
semiannual_yield = annual_yield / compounding_periods

# Number of periods (semiannual)
n_periods = n_years * compounding_periods

# Compute Present Value of Coupons (Annuity)
pv_coupons = coupon_payment * ((1 - (1 + semiannual_yield) ** -n_periods) / semiannual_yield)

# Compute Present Value of Face Value (Lump Sum)
pv_face_value = par_value / ((1 + semiannual_yield) ** n_periods)

# Total Bond Price
bond_price = pv_coupons + pv_face_value

# Round to nearest whole dollar
bond_price_rounded = round(bond_price)

bond_price_rounded

# Question 2: Find the yield rate i for 10-year bond
# Given data
bond_price_q11 = 779.20  # Purchase price
coupon_rate_q11 = 0.03  # Coupon rate (3% of 1000)
par_value_q11 = 1000  # Par value
n_years_q11 = 10  # 10 years

# Annual coupon payment
coupon_payment_q11 = coupon_rate_q11 * par_value_q11

# Solve for yield using numerical method
i_low, i_high = 0.01, 0.10  # Bracket for possible yield rate
while abs(i_high - i_low) > 0.0001:
    i_guess = (i_low + i_high) / 2
    pv_coupons = coupon_payment_q11 * ((1 - (1 + i_guess) ** -n_years_q11) / i_guess)
    pv_redemption = par_value_q11 / (1 + i_guess) ** n_years_q11
    bond_price_guess = pv_coupons + pv_redemption
    
    if bond_price_guess > bond_price_q11:
        i_low = i_guess
    else:
        i_high = i_guess

yield_rate_q11 = round(i_guess, 4)


## CHAPTER 5: NPV, DURATION, CONVEXITY

# Question 1: NPV of investment project
initial_investment = -100000  # Initial investment
cost_of_capital = 0.12  # 12% discount rate

# Cash flows from year 4 to year 15
years = np.arange(4, 16)  # Years 4 to 15
cash_flows = np.array([(5000 * (i - 3)) for i in years])  # Increasing cash flows

# Discounting each cash flow
npv_investment = sum(cash_flows / ((1 + cost_of_capital) ** years)) + initial_investment

# Round to nearest $100
npv_investment_rounded = round(npv_investment, -2)

# Question 2: Modified duration of zero-coupon bond
maturity = 30  # 30 years
yield_to_maturity = 0.08  # 8%

# Macaulay duration for zero-coupon bond is just its maturity
macaulay_duration = maturity

# Modified duration formula
modified_duration = macaulay_duration / (1 + yield_to_maturity)

# Round to two decimal places
modified_duration_rounded = round(modified_duration, 2)

# Display results
npv_property_rounded, npv_investment_rounded, modified_duration_rounded

# Question 3: Modified duration of zero-coupon bond
# Given data
face_value = 1000  # Bond face value
coupon_rate = 0.06  # 6% coupon rate
annual_coupon = face_value * coupon_rate  # Annual coupon payment
years_bond = 30  # Bond maturity
effective_rate_bond = 0.09  # 9% interest rate

# Price of the bond (P) using PV formula for annuity + lump sum
bond_price = sum([annual_coupon / ((1 + effective_rate_bond) ** t) for t in range(1, years_bond + 1)]) + \
             face_value / ((1 + effective_rate_bond) ** years_bond)

# Macaulay duration for coupon bond
macaulay_duration_bond = sum([(t * annual_coupon) / ((1 + effective_rate_bond) ** t) for t in range(1, years_bond + 1)]) + \
                         (years_bond * face_value) / ((1 + effective_rate_bond) ** years_bond)
macaulay_duration_bond /= bond_price

# Modified duration for coupon bond
modified_duration_bond = macaulay_duration_bond / (1 + effective_rate_bond)
modified_duration_bond_rounded = round(modified_duration_bond, 2)

# Question 4: Macaulay Duration of a 3-Year Bond
coupon = 100  # Coupon payment per year
face_value = 1000  # Redemption value
years_bond = 3  # Maturity in years
interest_rate_bond = 0.10  # Annual effective interest rate

# Calculate bond price (P)
bond_price = sum([coupon / ((1 + interest_rate_bond) ** t) for t in range(1, years_bond + 1)]) + \
             face_value / ((1 + interest_rate_bond) ** years_bond)

# Calculate Macaulay Duration
macaulay_duration_bond = sum([(t * coupon) / ((1 + interest_rate_bond) ** t) for t in range(1, years_bond + 1)]) + \
                         (years_bond * face_value) / ((1 + interest_rate_bond) ** years_bond)
macaulay_duration_bond /= bond_price

# Round to two decimal places
macaulay_duration_bond_rounded = round(macaulay_duration_bond, 2)


## CHAPTER 6: TERM STRUCTURE OF INTEREST RATES
