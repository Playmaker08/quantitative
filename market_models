## Using the provided market data, apply the cost of carry model, the Black-Scholes model, and Monte Carlo simulations to determine the fair price of a coffee option contract. Analyze how changes in supply, demand, weather, and geopolitical factors might impact your pricing.

Given:
Current spot price (St): $1.20 per pound
Risk-free rate (r): 2% per annum
Storage cost (d): 1% per annum
Time to maturity (T): 6 months (0.5 years)
Strike price (X): $1.25
Volatility (Ïƒ): 25% 

## ANSWER: python

import numpy as np
from scipy.stats import norm

# Given parameters
spot_price = 1.20  # Spot price in $/pound
strike_price = 1.25  # Strike price in $/pound
risk_free_rate = 0.02  # Annual risk-free rate (2%)
storage_cost = 0.01  # Annual storage cost (1%)
time_to_maturity = 0.5  # Time to maturity in years (6 months)
volatility = 0.25  # Annualized volatility (25%)

# 1. Cost of Carry Model to calculate futures price
futures_price = spot_price * np.exp((risk_free_rate + storage_cost) * time_to_maturity)

# 2. Black-Scholes Model to calculate call option price
# d1 and d2 calculations
d1 = (np.log(spot_price / strike_price) + (risk_free_rate + storage_cost + (volatility**2) / 2) * time_to_maturity) / (volatility * np.sqrt(time_to_maturity))
d2 = d1 - volatility * np.sqrt(time_to_maturity)

# Option price formula for a European call option
call_price = (spot_price * np.exp(-storage_cost * time_to_maturity) * norm.cdf(d1) -
              strike_price * np.exp(-risk_free_rate * time_to_maturity) * norm.cdf(d2))

# 3. Monte Carlo Simulation for futures price estimation
simulations = 10000  # Number of simulations
dt = time_to_maturity / 365  # Daily steps for the simulation

# Simulating random price paths
random_returns = np.random.normal((risk_free_rate - storage_cost - 0.5 * volatility**2) * time_to_maturity,
                                   volatility * np.sqrt(time_to_maturity), simulations)
simulated_prices = spot_price * np.exp(random_returns)

# Calculate average futures price from simulated paths
monte_carlo_futures_price = np.mean(simulated_prices)

# Outputs
futures_price, call_price, monte_carlo_futures_price

